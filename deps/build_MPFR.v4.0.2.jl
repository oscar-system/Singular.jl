using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libmpfr"], :libmpfr),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaPackaging/Yggdrasil/releases/download/MPFR-v4.0.2-1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/MPFR.v4.0.2.aarch64-linux-gnu.tar.gz", "fbff512827a44b86c19939bc5666027110b62d54701c0f579af62dd02cf19518"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/MPFR.v4.0.2.aarch64-linux-musl.tar.gz", "d4ebfea10868b8196a312f0b483cab6beb78ed9fe66f4f7be900004905b321d7"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/MPFR.v4.0.2.arm-linux-gnueabihf.tar.gz", "21b702c7627d1fe833eb713264e651d27b686b76901e5acfd8ac93e01feaa4eb"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/MPFR.v4.0.2.arm-linux-musleabihf.tar.gz", "4e31b0a493c7568a0c60a17d344b77441f60d0d3480a515e7408f7c84d3125a7"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/MPFR.v4.0.2.i686-linux-gnu.tar.gz", "28cbd7de899bb9a7d6dadefd5e10086b3ba074dae8564ebcf681d13f9b5df833"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/MPFR.v4.0.2.i686-linux-musl.tar.gz", "3d73769dfc17af77fbafd4e7c2ee332669bdae5b33d1a58e445130f0d5436905"),
    Windows(:i686) => ("$bin_prefix/MPFR.v4.0.2.i686-w64-mingw32.tar.gz", "01d4b74740216ca4fb5cacced798dfed7e1d0ba24d8f544255c684c1d38f3483"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/MPFR.v4.0.2.powerpc64le-linux-gnu.tar.gz", "5e0fd2a6eb6d47798226dc3704563fc51199dee12b930f688a73a2f29bb37bf6"),
    MacOS(:x86_64) => ("$bin_prefix/MPFR.v4.0.2.x86_64-apple-darwin14.tar.gz", "c99cc6e1833c44fff774bf13ca25c18dad2366395b7e16160b0f87c814ce08f5"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/MPFR.v4.0.2.x86_64-linux-gnu.tar.gz", "a697e9bfe0e40a8ed6c420c8f0d5a400ad47e29d95182eef710c9230c7a99d59"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/MPFR.v4.0.2.x86_64-linux-musl.tar.gz", "1cd8010896076f649e7932ad08a75d9a0d951f0ce8dde4a70703aa8523227a49"),
    FreeBSD(:x86_64) => ("$bin_prefix/MPFR.v4.0.2.x86_64-unknown-freebsd11.1.tar.gz", "525cbba1660c0ff46ed8fc38ab8af85c5504da839911523776368d217ac8425d"),
    Windows(:x86_64) => ("$bin_prefix/MPFR.v4.0.2.x86_64-w64-mingw32.tar.gz", "745c8b858c39a175af44958e514bd847b46dfb27008fd5b55a091f302fa5601a"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
