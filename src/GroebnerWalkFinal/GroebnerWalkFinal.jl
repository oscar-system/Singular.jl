include("GroebnerWalkUtilitysFinal.jl")
include("FractalWalkUtilitysFinal.jl")
include("GenericWalkUtilitysFinal.jl")
include("StandardWalkUtilitysFinal.jl")
include("TranWalkUtilitysFinal.jl")

export groebnerwalk

###############################################################
#Implementation of the gröbner walk.
###############################################################

#for counting the steps of the groebnerwalk.
counter = 0
function getCounter()
    global counter
    temp = counter
    counter = 0
    return temp
end
#=
@doc Markdown.doc"""
function groebnerwalk(
    G::Singular.sideal,
    S::Matrix{Int},
    T::Matrix{Int},
    grwalktype::Symbol = :standard,
    p::Int = 0,
)
Given an Ideal $G$ generated by a reduced Groebner Basis w.r.t. the monomial ordering $S$ this function
returns a reduced Groebner Basis w.r.t. the monomial ordering $T$ by converting it using the Groebner Walk.
The Groebner Walk is proposed by Collart et al. (1993)
One can choose a strategy of:
Standard Walk (:standard) computes the Walk like it´s presented in Cox et al. (2005).
Generic Walk (:generic) computes the Walk like it´s presented in Fukuda et al. (2006).
Pertubed Walk (:pertubed, with $p$ = Pertubation degree) computes the Walk like it´s presented in Amrhein et al. (1997).
Tran´s Walk (:tran) computes the Walk like it´s presented in Tran (2000).
Fractal Walk (:fractal) computes the Walk like it´s presented in Amrhein & Gloor (1998). Pertubes only the target vector.
Fractal Walk (:fractal_start_order) computes the Walk like it´s presented in Amrhein & Gloor (1998). Pertubes oth, the start und the target vector.
Fractal Walk (:fractal_lex) computes the Walk like it´s presented in Amrhein & Gloor (1998) in the special case that $T$ represents the lex ordering. Pertubes only the target vector.
Fractal Walk (:factal_look_ahead) computes the Walk like it´spresented in Amrhein & Gloor (1998). This Version uses the buchberger algorithm under certain circumstances before reaching the maximal pertubation depth.

#Arguments
*`I::Singular.sideal`: Gröbnerbasis to compute the Gröbnerbasis w.r.t. the traget-ordering.
*`S::Matrix{Int}`: The ordering w.r.t. the Gröbnerbasis I. Note that S has to be a nxn-matrix with rank(S)=n.
*`T::Matrix{Int}`: The ordering we want to compute a Gröbnerbasis for. Note that T has to be a nxn-matrix with rank(T)=n.
*`grwalktype::Symbol`: Strategy of the Gröbnerwalk to be used. There are the strategies:
    - `standard`: Standard Walk (default),
    - `pertubed`: Pertubed Walk,
    - `tran`: Tran´s Walk,
    - `generic`: Generic Walk,
    - `fractal`: Standard-Version of the Fractal Walk,
    - `fractalcombined`: Combined Fractal Walk with handling of start-ordering and look-ahead computation for lexicographic target-ordering,
    - `fractal_look_ahead`:Fractal Walk with look-ahead computation.
*`p::Int`: Pertubationdegree (p,p) for the pertubed Walk. Default is 2.
"""=#
function groebnerwalk(
    G::Singular.sideal,
    S::Matrix{Int},
    T::Matrix{Int},
    grwalktype::Symbol = :standard,
    p::Int = 2,
)
    if grwalktype == :standard
        walk = (x, y, z) -> standard_walk(x, y, z)
    elseif grwalktype == :generic
        walk = (x, y, z) -> generic_walk(x, y, z)
        #    elseif grwalktype == :pgeneric
        #        walk = (x,y,z) -> pgeneric_walk(x,y,z,p)
    elseif grwalktype == :pertubed
        walk = (x, y, z) -> pertubed_walk(x, y, z, p)
    elseif grwalktype == :fractal
        walk = (x, y, z) -> fractal_walk(x, y, z)
    elseif grwalktype == :fractal_start_order
        walk = (x, y, z) -> fractal_walk_start_order(x, y, z)
    elseif grwalktype == :fractal_lex
        walk = (x, y, z) -> fractal_walk_lex(x, y, z)
    elseif grwalktype == :fractal_look_ahead
        walk = (x, y, z) -> fractal_walk_look_ahead(x, y, z)
    elseif grwalktype == :tran
        walk = (x, y, z) -> tran_walk(x, y, z)
    elseif grwalktype == :fractal_combined
        walk = (x, y, z) -> fractal_walk_combined(x, y, z)
    end

    ######TODO:Check the parameter#####
    R = base_ring(G)
    I = Singular.Ideal(R, [R(x) for x in gens(G)])

    Gb = walk(I, S, T)
    println("Cones crossed: ", getCounter())

    S = change_order(Gb.base_ring, T)
    return Singular.Ideal(S, [change_ring(gen, S) for gen in gens(Gb)])
end

function standard_walk(G::Singular.sideal, S::Matrix{Int}, T::Matrix{Int})
    println("standard_walk results")
    println("Crossed Cones in: ")
    standard_walk(G, S, T, S[1, :], T[1, :])
end

function standard_walk(
    G::Singular.sideal,
    S::Matrix{Int},
    T::Matrix{Int},
    cweight::Vector{Int},
    tweight::Vector{Int},
)
    R = base_ring(G)
    Rn = change_order(R, cweight, T)
    terminate = false
    while !terminate
        G = standard_step(G, R, cweight, Rn)
        println(cweight)
        global counter = getCounter() + 1
        if cweight == tweight
            terminate = true
        else
            cweight = next_weight(G, cweight, tweight)
            if !checkInt32(cweight)
                return G
            end
            #            while !checkInt32(cweight)
            #                cweight, b = truncw(G, cweight)
            #                if !b
            #                    return G
            #                end
            #            end
            R = Rn
            Rn = change_order(Rn, cweight, T)
        end
    end
    return G
end

function standard_step(
    G::Singular.sideal,
    R::Singular.PolyRing,
    cw::Vector{Int},
    Rn::Singular.PolyRing,
)
    Gw = initials(Rn, gens(G), cw)
    H = Singular.std(Singular.Ideal(Rn, Gw), complete_reduction = true)
    #H = liftGW2(G, R, Gw, H, Rn)
    H = lift(G, R, H, Rn)
    return interreduceGW(H)
end

###############################################################
#Generic-version of the groebner walk by Fukuda et al. (2007)
###############################################################

function generic_walk(G::Singular.sideal, S::Matrix{Int}, T::Matrix{Int})
    R = base_ring(G)
    Rn = change_order(G.base_ring, T)
    Lm = [change_ring(Singular.leading_term(g), Rn) for g in gens(G)]
    G = [change_ring(x, Rn) for x in gens(G)]
    v = next_gamma(G, Lm, [0], S, T)


    println("generic_walk results")
    println("Crossed Cones with facetNormal: ")
    while !isempty(v)
        global counter = getCounter() + 1
        println(v)
        G, Lm = generic_step(G, Lm, v, Rn)
        v = next_gamma(G, Lm, v, S, T)
    end
    G = Singular.Ideal(Rn, G)
    G.isGB = true
    return Singular.interreduce(G)
end

function generic_step(
    G::Vector{Singular.spoly{L}},
    Lm::Vector{Singular.spoly{L}},
    v::Vector{Int},
    Rn::Singular.PolyRing,
) where {L<:Nemo.RingElem}

    facet_Generators = facet_initials(G, Lm, v)
    H = Singular.std(
        Singular.Ideal(Rn, facet_Generators),
        complete_reduction = true,
    )
    H, Lm = lift_generic(G, Lm, H)
    G = interreduce(H, Lm)
    return G, Lm
end


###############################################################
#Pertubed-version of the groebner walk Amrhein et al.
###############################################################
function pertubed_walk(
    G::Singular.sideal,
    S::Matrix{Int},
    T::Matrix{Int},
    p::Int,
)
    cweight = pertubed_vector(G, S, p)
    #cweight = S[1, :]
    terminate = false
    println("pertubed_walk results")
    println("Crossed Cones in: ")
    while !terminate
        tweight = pertubed_vector(G, T, p)
        Tn = add_weight_vector(tweight, T)
        G = standard_walk(G, S, Tn, cweight, tweight)
        if inCone(G, T, tweight)
            terminate = true
        else
            p = p - 1
            cweight = tweight
            S = Tn
        end
    end
    return G
end

###############################################################
#fractal-walk by Amrhein et al.
#Inlcuding:
#fractal_walk -> standard-version
#fractal_walk2 -> checks if the starting weight is in the inner of a cone.
#fractal_walk3 -> fractal walk expecially for conversion to the lexikographic orderig.
#                 checks if the starting weight is in the inner of a cone.
###############################################################

########################################
#Counter for the steps in the fractal_walk
########################################
counterFr = 0
function deleteCounterFr()
    global counterFr
    temp = counterFr
    counterFr = 0
    return temp
end
function getCounterFr()
    global counterFr
    return counterFr
end
function raiseCounterFr()
    global counterFr = getCounterFr() + 1
end
PertVecs = []
sigma = []

function fractal_walk(G::Singular.sideal, S::Matrix{Int}, T::Matrix{Int})
    global PertVecs = [pertubed_vector(G, T, i) for i = 1:nvars(base_ring(G))]
    println(PertVecs)
    println("FractalWalk_standard results")
    println("Crossed Cones in: ")
    Gb = fractal_recursiv(G, S, T, S[1, :], PertVecs, 1)
    println("Cones crossed: ", deleteCounterFr())
    return Gb
end

function fractal_recursiv(
    G::Singular.sideal,
    S::Matrix{Int},
    T::Matrix{Int},
    cw::Vector{Int},
    PertVecs::Vector{Vector{Int}},
    p::Int,
)
    R = base_ring(G)
    terminate = false
    G.isGB = true
    w = cw

    while !terminate
        t = next_weightfr(G, w, PertVecs[p])
        if t == [0]
            if inCone(G, T, PertVecs, p)
                println(PertVecs[p], " in Cone", p)
                return G
            else
                global PertVecs = [pertubed_vector(G, T, i) for i = 1:nvars(R)]
                println("not in Cone ", PertVecs)
                continue
            end
        end
        w = w + t * (PertVecs[p] - w)
        w = convert_bounding_vector(w)
        checkInt32(w)
        Gw = initials(R, Singular.gens(G), w)
        if p == nvars(R)
            Rn = change_order(R, w, PertVecs[p], T)
            H = Singular.std(
                Singular.Ideal(Rn, [change_ring(x, Rn) for x in Gw]),
                complete_reduction = true,
            )
            println(w, " in depth", p)
            raiseCounterFr()
        else
            println("up in: ", p, " with: ", w)
            H = fractal_recursiv(
                Singular.Ideal(R, [x for x in Gw]),
                S,
                T,
                deepcopy(cw),
                PertVecs,
                p + 1,
            )
        end
        Rn = change_order(R, w, PertVecs[p], T)

        #H = liftGW2(G, R, Gw, H, Rn)
        H = lift_fractal_walk(G, R, H, Rn)
        G = interreduceGW(H)
        R = Rn
        cw = w
    end
    return G
end

cwPert = []
firstStepMode = false
function cwpert(p::Int)
    cwPert[p]
end

function fractal_walk_start_order(
    G::Singular.sideal,
    S::Matrix{Int},
    T::Matrix{Int},
)
    global PertVecs =
        [pertubed_vector(G, T, i) for i = 1:nvars(Singular.base_ring(G))]
    global sigma = S[1, :]
    println("fractal_walk_withStartorder results")
    println("Crossed Cones in: ")
    Gb = fractal_walk_recursiv_startorder(G, S, T, S[1, :], PertVecs, 1)
    println("Cones crossed: ", deleteCounterFr())
    return Gb
end

function fractal_walk_recursiv_startorder(
    G::Singular.sideal,
    S::Matrix{Int},
    T::Matrix{Int},
    cw::Vector{Int},
    PertVecs::Vector{Vector{Int}},
    p::Int,
)
    R = Singular.base_ring(G)
    terminate = false
    G.isGB = true
    if (p == 1)
        if !isMonomial(initials(R, Singular.gens(G), cw))
            global cwPert = [pertubed_vector(G, S, i) for i = 1:nvars(R)]
            global firstStepMode = true
        end
    end
    if firstStepMode
        w = cwPert[p]
    else
        w = cw
    end

    while !terminate
        t = next_weightfr(G, w, PertVecs, p)
        if t == [0]
            if inCone(G, T, PertVecs[p])
                println(PertVecs[p], " in Cone", p)
                return G
            else
                global PertVecs = [pertubed_vector(G, T, i) for i = 1:nvars(R)]
                println("not in Cone ", PertVecs)
                continue
            end
        end
        w = w + t * (PertVecs[p] - w)
        w = convert_bounding_vector(w)
        checkInt32(w)
        Gw = initials(R, gens(G), w)
        if p == Singular.nvars(R)
            Rn = change_order(R, w, PertVecs[p], T)
            H = Singular.std(
                Singular.Ideal(Rn, [change_ring(x, Rn) for x in Gw]),
                complete_reduction = true,
            )
            println(w, " in depth", p)
            raiseCounterFr()
        else
            println("up in: ", p, " with: ", w)
            H = fractal_walk_recursiv_startorder(
                Singular.Ideal(R, [x for x in Gw]),
                S,
                T,
                deepcopy(cw),
                PertVecs,
                p + 1,
            )
            global firstStepMode = false
        end
        Rn = change_order(R, w, PertVecs[p], T)

        #H = liftGW2(G, R, Gw, H, Rn)
        H = lift_fractal_walk(G, R, H, Rn)
        G = interreduceGW(H)
        R = Rn
        cw = w
    end
    return G
end
function fractal_walk_lex(G::Singular.sideal, S::Matrix{Int}, T::Matrix{Int})
    global PertVecs = [pertubed_vector(G, T, i) for i = 1:nvars(base_ring(G))]
    println("fractal_walk_lex results")
    println("Crossed Cones in: ")
    Gb = fractal_walk_recursive_lex(G, S, T, S[1, :], PertVecs, 1)
    println("Cones crossed: ", deleteCounterFr())
    return Gb
end

function fractal_walk_recursive_lex(
    G::Singular.sideal,
    S::Matrix{Int},
    T::Matrix{Int},
    cw::Vector{Int},
    PertVecs::Vector{Vector{Int}},
    p::Int,
)
    R = Singular.base_ring(G)
    terminate = false
    G.isGB = true
    w = cw
    while !terminate
        t = next_weightfr(G, w, PertVecs[p])
        if t == [0]
            if inCone(G, T, PertVecs, p)
                println(PertVecs[p], " in Cone", p)
                return G
            else
                global PertVecs = [pertubed_vector(G, T, i) for i = 1:nvars(R)]
                println("not in Cone ", PertVecs)
                continue
            end
        end
        if t == 1 && p == 1
            return fractal_walk_recursive_lex(G, S, T, w, PertVecs, p + 1)
        else
            w = w + t * (PertVecs[p] - w)
            w = convert_bounding_vector(w)
            checkInt32(w)
            Gw = initials(R, Singular.gens(G), w)
            if p == Singular.nvars(R)
                Rn = change_order(R, w, PertVecs[p], T)
                H = Singular.std(
                    Singular.Ideal(Rn, [change_ring(x, Rn) for x in Gw]),
                    complete_reduction = true,
                )
                println(w, " in depth", p)
                raiseCounterFr()
            else
                println("up in: ", p, " with: ", w)
                H = fractal_walk_recursive_lex(
                    Singular.Ideal(R, [x for x in Gw]),
                    S,
                    T,
                    deepcopy(cw),
                    PertVecs,
                    p + 1,
                )
                global firstStepMode = false
            end
        end
        Rn = change_order(R, w, PertVecs[p], T)
        #H = liftGW2(G, R, Gw, H, Rn)
        H = lift_fractal_walk(G, R, H, Rn)
        G = interreduceGW(H)
        R = Rn
        cw = w
    end
    return G
end
function fractal_walk_look_ahead(
    G::Singular.sideal,
    S::Matrix{Int},
    T::Matrix{Int},
)
    println("fractal_walk_look_ahead results")
    println("Crossed Cones in: ")
    global PertVecs = [pertubed_vector(G, T, i) for i = 1:nvars(base_ring(G))]
    Gb = fractal_walk_look_ahead_recursiv(G, S, T, S[1, :], PertVecs, 1)
    println("Cones crossed: ", deleteCounterFr())
    return Gb
end

function fractal_walk_look_ahead_recursiv(
    G::Singular.sideal,
    S::Matrix{Int},
    T::Matrix{Int},
    cw::Vector{Int},
    PertVecs::Vector{Vector{Int}},
    p::Int,
)
    R = Singular.base_ring(G)
    terminate = false
    G.isGB = true
    w = cw

    while !terminate
        t = next_weightfr(G, w, PertVecs[p])
        if t == [0]
            if inCone(G, T, PertVecs, p)
                println(PertVecs[p], " in Cone ", p)
                return G
            else
                global PertVecs = [pertubed_vector(G, T, i) for i = 1:nvars(R)]
                println(PertVecs[p], " not in Cone")
                continue
            end
        end
        w = w + t * (PertVecs[p] - w)
        w = convert_bounding_vector(w)
        checkInt32(w)
        Gw = initials(R, Singular.gens(G), w)
        if (p == Singular.nvars(R) || isbinomial(Gw))
            Rn = change_order(R, w, PertVecs[p], T)
            H = Singular.std(
                Singular.Ideal(Rn, [change_ring(x, Rn) for x in Gw]),
                complete_reduction = true,
            )
            println(w, " in depth", p)
            raiseCounterFr()
        else
            println("up in: ", p, " with: ", w)
            H = fractal_walk_look_ahead_recursiv(
                Singular.Ideal(R, Gw),
                S,
                T,
                deepcopy(cw),
                PertVecs,
                p + 1,
            )
        end
        Rn = change_order(R, w, PertVecs[p], T)
        #H = liftGW2(G, R, Gw, H, Rn)
        H = lift_fractal_walk(G, R, H, Rn)
        G = interreduceGW(H)
        R = Rn
        cw = w
    end
    return G
end


function fractal_walk_combined(
    G::Singular.sideal,
    S::Matrix{Int},
    T::Matrix{Int},
)
    global PertVecs =
        [pertubed_vector(G, T, i) for i = 1:nvars(Singular.base_ring(G))]
    println(PertVecs)
    println("fractal_walk_combined results")
    println("Crossed Cones in: ")
    Gb = fractal_walk_combined(G, S, T, S[1, :], PertVecs, 1)
    println("Cones crossed: ", deleteCounterFr())
    return Gb
end

function fractal_walk_combined(
    G::Singular.sideal,
    S::Matrix{Int},
    T::Matrix{Int},
    cw::Vector{Int},
    PertVecs::Vector{Vector{Int}},
    p::Int,
)
    R = Singular.base_ring(G)
    terminate = false
    G.isGB = true
    if (p == 1)
        if !isMonomial(initials(R, Singular.gens(G), cw))
            global cwPert = [pertubed_vector(G, S, i) for i = 1:nvars(R)]
            println(cwPert)
            global firstStepMode = true
        end
    end
    if firstStepMode
        w = cwPert[p]
    else
        w = cw
    end

    while !terminate
        t = next_weightfr(G, w, PertVecs[p])
        if t == [0]
            if inCone(G, T, PertVecs, p)
                println(PertVecs[p], " in Cone", p)
                return G
            else
                global PertVecs = [pertubed_vector(G, T, i) for i = 1:nvars(R)]
                println("not in Cone ", PertVecs)
                continue
            end
        end
        if t == 1 && p == 1
            println("up in: ", p, " with: t = 1")
            return fractal_walk_combined(G, S, T, w, PertVecs, p + 1)
        else
            w = w + t * (PertVecs[p] - w)
            w = convert_bounding_vector(w)
            checkInt32(w)
            Gw = initials(R, gens(G), w)

            if (p == Singular.nvars(R) || isbinomial(Gw))
                Rn = change_order(R, w, PertVecs[p], T)
                H = Singular.std(
                    Singular.Ideal(Rn, [change_ring(x, Rn) for x in Gw]),
                    complete_reduction = true,
                )
                println(w, " in depth", p)
                raiseCounterFr()
            else
                println("from $(cw) to $(w)", "up in: ", p, " with: ", w)
                H = fractal_walk_combined(
                    Singular.Ideal(R, [x for x in Gw]),
                    S,
                    T,
                    deepcopy(cw),
                    PertVecs,
                    p + 1,
                )
                global firstStepMode = false
            end
        end
        Rn = change_order(R, w, PertVecs[p], T)
        #H = liftGW2(G, R, Gw, H, Rn)
        @time H = lift_fractal_walk(G, R, H, Rn)
        G = interreduceGW(H)
        G = G.value
        R = Rn
        cw = w
    end
    return G
end
###############################################################
#Tran-version of the groebner walk by Tran (2002)
###############################################################

function tran_walk(G::Singular.sideal, S::Matrix{Int}, T::Matrix{Int})
    cweight = S[1, :]
    tweight = T[1, :]
    println("tran_walk results")
    println("Crossed Cones in: ")
    R = base_ring(G)
    if !isMonomial(initials(R, Singular.gens(G), cweight))
        cweight = pertubed_vector(G, S, nvars(R))
    end

    terminate = false
    while !terminate
        w = next_weight(G, cweight, tweight)
        println(w)
        while !checkInt32(w)
            #    w, b = truncw(G, w)
            #    if !b
            return G
            #    end
        end
        Rn = change_order(R, w, T)
        if w == tweight
            if inCone(G, T, cweight)
                return G
            elseif inSeveralCones(initials(base_ring(G), gens(G), tweight))
                tweight = representation_vector(G, T)
                continue
            end
        end
        G = standard_step(G, R, w, Rn)
        global counter = getCounter() + 1
        R = Rn
        cweight = w
    end
    return G
end
